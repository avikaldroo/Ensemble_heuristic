def r_to_python_filter_final(r_filter_string, dataframe_name='x_df'):
    """
    Converts an advanced R-style filter string to a Python (pandas) filter string with separate conditions.

    :param r_filter_string: The advanced filter string used in R.
    :param dataframe_name: The name of the dataframe in the Python script.
    :return: A Python (pandas) compatible filter string.
    """

    # Function to convert match object to pandas format
    def convert_match_to_pandas(match):
        column_index = int(match.group(1)) - 1
        return f"{dataframe_name}.iloc[:, {column_index}]"

    # Extract conditions within c(...)
    conditions = re.findall(r"%in% c\('(.*?)'\)", r_filter_string)

    # Process each set of conditions
    all_python_conditions = []
    for condition in conditions:
        # Split individual conditions
        individual_conditions = condition.split(' & ')

        # Process each individual condition
        for ind_cond in individual_conditions:
            # Replace R column selection with Python's .iloc and adjust for zero-based indexing
            python_condition = re.sub(r'X\[,(\d+)\]', convert_match_to_pandas, ind_cond)

            # Add the processed condition to the list
            all_python_conditions.append('(' + python_condition + ')')

    # Join all conditions with '&'
    python_filter = ' & '.join(all_python_conditions)

    return python_filter
